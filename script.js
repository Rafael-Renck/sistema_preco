<script>                (function(){                  const q = document.getElementById('q');                  const dl = document.getElementById('sugestoes');                  const tabela = document.getElementById('tabela_nome');                  const uf = document.getElementById('uf');                  const btnBuscar = document.getElementById('btn-buscar');                  const isCbhpm = {{ is_cbhpm | tojson }};                  const baseOptions = {{ (versoes_disp if is_cbhpm else prestadores_disp) | tojson }};                  const initiallySelected = {{ (selected_versoes if is_cbhpm else selected_prestadores) | tojson }};                  const hiddenName = {{ ('versoes' if is_cbhpm else 'prestadores') | tojson }};                  const serverColumns = {{ (columns or []) | tojson }};                  const selectedSet = new Set(initiallySelected);                  const msToggle = document.getElementById('ms-toggle');                  const msDropdown = document.getElementById('ms-dropdown');                  const msList = document.getElementById('ms-list');                  const msChips = document.getElementById('ms-chips');                  const hiddenContainer = document.getElementById('prestadores-hidden');                  const msFilter = document.getElementById('ms-filter');                  let last = ';                  function syncHidden(){ hiddenContainer.innerHTML='' selectedSet.forEach(v=>{ const i=document.createElement('input'); i.type='hidden'; i.name=hiddenName; i.value=v; hiddenContainer.appendChild(i); }); }                  function toggleBuscarState(){ const hasTabela=!!(tabela&&tabela.value); const hasSelection=selectedSet.size>0 || (q&&q.value.trim().length>0); btnBuscar.disabled=!(hasTabela&&hasSelection); }                  function renderChips(){                    msChips.innerHTML=''                    if(selectedSet.size===0){ msToggle.innerText = (isCbhpm ? 'Selecionar versões…' : 'Selecionar prestadores…'); return; }                    msToggle.innerText = `${selectedSet.size} ${(isCbhpm?'versão(ões)':'prestador(es)')} selecionado(s)`;                    selectedSet.forEach(v=>{ const chip=document.createElement('span'); chip.className='chip'; chip.textContent=v; const x=document.createElement('button'); x.type='button'; x.className='chip-x'; x.textContent='×'; x.onclick=()=>{ selectedSet.delete(v); renderChips(); renderPrestadores(currentAvailable); syncHidden(); toggleBuscarState(); }; chip.appendChild(x); msChips.appendChild(chip); });                  }                  let currentAvailable = baseOptions.slice();                  function renderPrestadores(arr){ currentAvailable=arr.slice(); const term=(msFilter.value||'').toLowerCase(); const filtered=arr.filter(p=>p.toLowerCase().includes(term)); msList.innerHTML=filtered.map(p=>`<label class="ms-item"><input type="checkbox" value="${p}" ${selectedSet.has(p)?'checked':'}/> ${p}</label>`).join('); msList.querySelectorAll('input[type="checkbox"]').forEach(chk=>{ chk.addEventListener('change',e=>{ const v=e.target.value; if(e.target.checked){selectedSet.add(v);} else {selectedSet.delete(v);} renderChips(); syncHidden(); toggleBuscarState(); });}); }                  async function fetchSuggest(term){                    const t = tabela ? tabela.value : ';                    if(!term || term.length < 2) { dl.innerHTML='' return; }                    const params = new URLSearchParams({q:term});                    if(t) params.append('tabela_nome', t);                    if(uf && uf.value) params.append('uf', uf.value);                    try{                      const res = await fetch(`{{ url_for('suggest_procedimentos') }}?`+params.toString());                      const data = await res.json();                      dl.innerHTML = data.map(d=>`<option value="${d.codigo} - ${d.descricao.replaceAll('"',')}"></option>`).join(');                    }catch(e){ /* ignore */ }                  }                  function extractCode(value){                    if(!value) return ';                    return value.split(' - ')[0].trim();                  }                  async function refreshPrestadoresByCode(){                    const code = extractCode(q.value);                    const t = tabela ? tabela.value : ';                    if(!code){ renderPrestadores(baseOptions); return; }                    if(isCbhpm){                      const params = new URLSearchParams({tabela_nome: t, codigo: code}); if(uf && uf.value) params.append('uf', uf.value);                      try{ const res = await fetch(`{{ url_for('api_versoes_por_codigo') }}?`+params.toString()); const data = await res.json(); const arr = (data && data.length) ? data : baseOptions; renderPrestadores(arr);}catch(e){ renderPrestadores(baseOptions);}                    } else {                      if(!t){ renderPrestadores(baseOptions); return; }                      const params = new URLSearchParams({tabela_nome: t, codigo: code}); if(uf && uf.value) params.append('uf', uf.value);                      try{ const res = await fetch(`{{ url_for('api_prestadores_por_codigo') }}?`+params.toString()); const data = await res.json(); const arr = (data && data.length) ? data : baseOptions; renderPrestadores(arr);}catch(e){ renderPrestadores(baseOptions);}                                        }                  }                  q && q.addEventListener('input', (e)=>{                    const term = e.target.value.trim();                    if(term===last) return; last = term; fetchSuggest(term); refreshPrestadoresByCode(); toggleBuscarState();                  });                  const form = document.getElementById('form-busca');                  const runFlag = document.getElementById('run-flag');                  tabela && tabela.addEventListener('change', ()=>{                    // Submete sem executar a busca, apenas para atualizar o modo (CBHPM x normal)                    if(runFlag) runFlag.value=''                    form && form.submit();                  });                  uf && uf.addEventListener('change', ()=>{                    if(q.value.trim()) fetchSuggest(q.value.trim()); refreshPrestadoresByCode();                  });                  document.getElementById('ms-select-all')?.addEventListener('click', ()=>{ currentAvailable.forEach(v=>selectedSet.add(v)); renderChips(); renderPrestadores(currentAvailable); syncHidden(); toggleBuscarState(); });                  document.getElementById('ms-clear-all')?.addEventListener('click', ()=>{ selectedSet.clear(); renderChips(); renderPrestadores(currentAvailable); syncHidden(); toggleBuscarState(); });                  msToggle && msToggle.addEventListener('click', ()=>{ msDropdown.classList.toggle('open'); });                  document.addEventListener('click', (e)=>{ if(!document.getElementById('ms-prestadores').contains(e.target)) msDropdown.classList.remove('open'); });                  msFilter && msFilter.addEventListener('input', ()=> renderPrestadores(currentAvailable));                  // init                  renderPrestadores(baseOptions); renderChips(); syncHidden(); toggleBuscarState();                  // Precarrega sugestões se já houver termo                  if(q.value && q.value.trim().length>=2){ fetchSuggest(q.value.trim()); }                  // Limpar filtros                  // Detalhes (modal)                  const modal = document.getElementById('detail-modal');                  const modalClose = document.getElementById('modal-close');                  const modalX = document.getElementById('modal-x');                  const dSearch = document.getElementById('d-search');                  const dSort = document.getElementById('d-sort');                  const dOrder = document.getElementById('d-order');                  const dPrev = document.getElementById('d-prev');                  const dNext = document.getElementById('d-next');                  const dTableBody = document.querySelector('#detail-table tbody');                  const dCount = document.getElementById('detail-count');                  const dSize = document.getElementById('d-size');                  const dLoading = document.getElementById('detail-loading');                  const sumBar = document.getElementById('detail-summary');                  const sumCount = document.getElementById('sum-count');                  const sumMin = document.getElementById('sum-min');                  const sumAvg = document.getElementById('sum-avg');                  const sumMax = document.getElementById('sum-max');                  let dState = { codigo:', descricao:', page:1, page_size:20, qprest:', sort:'valor', order:'desc' };                  function openModal(codigo, descricao){                    dState = { codigo, descricao, page:1, page_size:20, qprest:', sort:dSort.value, order:dOrder.value };                    document.getElementById('detail-title').innerText = `${codigo} — ${descricao}`;                    dSearch.value = ';                    modal.classList.add('open');                    fetchDetail();                  }                  function closeModal(){ modal.classList.remove('open'); }                  modalClose && modalClose.addEventListener('click', closeModal);                  modalX && modalX.addEventListener('click', closeModal);                  async function fetchDetail(){                    dLoading.removeAttribute('aria-hidden');                    let data = {items:[], total:0, summary:null};                    if(isCbhpm){                      // Detalhe por versões                      const params = new URLSearchParams({ codigo: dState.codigo, uf: uf ? uf.value : ' });                      // usa versões selecionadas (selectedSet) ou colunas do servidor                      let vs = Array.from(hiddenContainer.querySelectorAll('input[name="versoes"]')).map(i=>i.value);                      if(vs.length===0 && Array.isArray(serverColumns) && serverColumns.length){ vs = serverColumns; }                      vs.forEach(v=> params.append('versoes', v));                      const res = await fetch(`{{ url_for('api_cbhpm_detalhe') }}?`+params.toString());                      data = await res.json();                      // Render versão/valor                      dTableBody.innerHTML = (data.items||[]).map(it=>`<tr><td>${it.versao}</td><td>-</td><td>${it.valor?Number(it.valor).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td></tr>`).join(');                      dCount.innerText = `${data.total||0} versão(ões)`;                      dPrev.disabled = true; dNext.disabled = true; // sem paginação para versões                    } else {                      const params = new URLSearchParams({                        tabela_nome: tabela ? tabela.value : ',                        uf: uf ? uf.value : ',                        codigo: dState.codigo,                        qprest: dState.qprest,                        sort: dState.sort,                        order: dState.order,                        page: dState.page,                        page_size: dState.page_size,                      });                      const res = await fetch(`{{ url_for('api_procedimento_detalhe') }}?`+params.toString());                      data = await res.json();                      dTableBody.innerHTML = (data.items||[]).map(it=>`<tr><td>${it.prestador||'-'}</td><td>${it.uf||''}</td><td>${Number(it.valor).toLocaleString('pt-BR',{style:'currency',currency:'BRL'})}</td></tr>`).join(');                      dCount.innerText = `${data.total||0} prestador(es)`;                      dPrev.disabled = (dState.page<=1);                      const maxPage = Math.ceil((data.total||0)/dState.page_size)||1;                      dNext.disabled = (dState.page>=maxPage);                    }                    // summary chips                    if(data.summary){                      sumBar.style.display = 'flex';                      sumCount.textContent = (data.summary.count||0);                      sumMin.textContent = data.summary.min ? Number(data.summary.min).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}) : '-';                      sumAvg.textContent = data.summary.avg ? Number(data.summary.avg).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}) : '-';                      sumMax.textContent = data.summary.max ? Number(data.summary.max).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}) : '-';                    }                    dLoading.setAttribute('aria-hidden','true');                  }                  dSearch && dSearch.addEventListener('input', ()=>{ dState.qprest = dSearch.value.trim(); dState.page=1; fetchDetail(); });                  dSort && dSort.addEventListener('change', ()=>{ dState.sort = dSort.value; dState.page=1; fetchDetail(); });                  dOrder && dOrder.addEventListener('change', ()=>{ dState.order = dOrder.value; dState.page=1; fetchDetail(); });                  dPrev && dPrev.addEventListener('click', ()=>{ if(dState.page>1){ dState.page--; fetchDetail(); } });                  dNext && dNext.addEventListener('click', ()=>{ dState.page++; fetchDetail(); });                  dSize && dSize.addEventListener('change', ()=>{ dState.page_size = parseInt(dSize.value)||20; dState.page = 1; fetchDetail(); });                  // UX: fechar com Esc                  document.addEventListener('keydown', (e)=>{ if(e.key==='Escape'){ modal.classList.remove('open'); }});                  // Delegação para botões Detalhar                  document.addEventListener('click', (e)=>{                    const btn = e.target.closest('.btn-detail');                    if(btn){ openModal(btn.dataset.code, btn.dataset.desc); }                  });                  // Abrir/fechar modal de simulação                  const simOpen = document.getElementById('btn-open-sim');                  const simModal = document.getElementById('sim-modal');                  const simClose = document.getElementById('sim-close');                  const simX = document.getElementById('sim-x');                  const simCancel = document.getElementById('sim-cancel');                  const openSim = ()=> simModal.classList.add('open');                  const closeSim = ()=> simModal.classList.remove('open');                  simOpen && simOpen.addEventListener('click', openSim);                  simClose && simClose.addEventListener('click', closeSim);                  simX && simX.addEventListener('click', closeSim);                  simCancel && simCancel.addEventListener('click', closeSim);                  // Limpar filtros                  const btnClear = document.getElementById('btn-limpar');                  btnClear && btnClear.addEventListener('click', ()=>{                    q.value='' uf.value='' selectedSet.clear(); renderChips(); renderPrestadores(baseOptions); syncHidden(); toggleBuscarState();                  });                  // Simulação                  const sQ = document.getElementById('sim-q');                  const sVersao = document.getElementById('sim-versao');                  const sUF = document.getElementById('sim-uf');                  const sPorte = document.getElementById('sim-porte');                  const sPorteAn = document.getElementById('sim-porte-an');                  const sUco = document.getElementById('sim-uco');                  const sFilme = document.getElementById('sim-filme');                  const sAjPorte = document.getElementById('sim-aj-porte');                  const sAjAn = document.getElementById('sim-aj-an');                  const sBtn = document.getElementById('btn-simular');                  const sAdd = document.getElementById('sim-add');                  const sChips = document.getElementById('sim-chips');                  const sRes = document.getElementById('sim-resultado');                  const sInfo = document.getElementById('sim-info');                  const sInfoPorte = document.getElementById('sim-porte-tab');                  const sInfoPorteAn = document.getElementById('sim-porte-an-tab');                  const sInfoUco = document.getElementById('sim-uco-val');                  const sItemsWrap = document.getElementById('sim-items-wrap');                  const sItems = document.getElementById('sim-items');                  dBtn && dBtn.addEventListener('click', async ()=>{
                    if(!dTab.value){ dWrap.style.display='none'; return; }
                    const params = new URLSearchParams({ tabela_nome: dTab.value });
                    if(dQ.value) params.append('q', dQ.value.trim());
                    if(sUF.value) params.append('uf', sUF.value);
                    try {
                      const res = await fetch(`{{ url_for('api_simulacao_dtp') }}`+'?'+params.toString());
                      const data = await res.json();
                      dBody.innerHTML = (data.itens||[]).map(it=>`<tr><td>${it.codigo}</td><td>${it.descricao||''}</td><td style="text-align:right;">${it.valor?Number(it.valor).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td></tr>`).join(');
                      dTotal.textContent = data.total ? Number(data.total).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}) : '-';
                      dWrap.style.display='block';
                    } catch(e){ dWrap.style.display='none'; }
                  });                  const sExport = document.getElementById('btn-exportar-pdf');                  // DTP widgets                  const dTab = document.getElementById('sim-dtp-tab');                  const dQ = document.getElementById('sim-dtp-q');                  const dBtn = document.getElementById('btn-dtp-buscar');                  const dWrap = document.getElementById('sim-dtp-wrap');                  const dBody = document.getElementById('sim-dtp-body');                  const dTotal = document.getElementById('sim-dtp-total');                  let lastSimData = null;                  // Sugestões no campo do simulador                  let lastSim = '';                  sQ && sQ.addEventListener('input', (e)=>{                    const term = e.target.value.trim();                    if(term===lastSim) return; lastSim = term;                    fetchSuggest(term);                  });                  if(sQ && sQ.value && sQ.value.trim().length>=2){ fetchSuggest(sQ.value.trim()); }                  // Seleção de múltiplos códigos (pacote)                  let simSelected = [];                  function renderSimChips(){                    if(!sChips) return;                    sChips.innerHTML = simSelected.map(it=>`<span class="chip">${it.codigo} — ${it.descricao || '}<button type="button" class="chip-x" data-cod="${it.codigo}">×</button></span>`).join(');                    sChips.querySelectorAll('.chip-x').forEach(btn=>{                      btn.addEventListener('click', (e)=>{                        const cod = e.target.getAttribute('data-cod');                        simSelected = simSelected.filter(i=>i.codigo!==cod);                        renderSimChips();                      });                    });                  }                  function addCurrentCode(){                    const raw = sQ.value.trim();                    const cod = extractCode(raw);                    const desc = raw.includes(' - ') ? raw.split(' - ').slice(1).join(' - ') : ';                    if(!cod) return;                    if(!simSelected.some(i=>i.codigo===cod)){                      simSelected.push({codigo: cod, descricao: desc});                      renderSimChips();                      sQ.value='' lastSim=''                    }                  }                  sAdd && sAdd.addEventListener('click', addCurrentCode);                  sQ && sQ.addEventListener('keydown', (e)=>{ if(e.key==='Enter'){ e.preventDefault(); addCurrentCode(); }});                  sBtn && sBtn.addEventListener('click', async ()=>{                    const payload = {                      codigo: extractCode(sQ.value.trim()),                      versao: sVersao.value||undefined,                      uf: sUF.value||undefined,                      porte_tab: sPorte.value||undefined,                      porte_an_tab: sPorteAn.value||undefined,                      uco_valor: sUco.value||undefined,                      filme_valor: sFilme.value||undefined,                      ajuste_porte_pct: sAjPorte.value||undefined,                      ajuste_porte_an_pct: sAjAn.value||undefined,                    };                    if(simSelected.length>0){                      payload.codigos = simSelected.map(i=>i.codigo);                    }                    try{                      const res = await fetch(`{{ url_for('api_simulacao_cbhpm') }}`, {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});                      const data = await res.json();                      lastSimData = data;                      const isPacote = Array.isArray(data.itens);                      if(isPacote){                        sItems.innerHTML = data.itens.map(it=>`<tr>                          <td>${it.codigo}</td>                          <td>${it.descricao||''}</td>                          <td>${it.total_porte?Number(it.total_porte).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>                          <td>${it.total_filme?Number(it.total_filme).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>                          <td>${it.total_uco?Number(it.total_uco).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>                          <td>${it.total_porte_an?Number(it.total_porte_an).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>                          <td>${it.total_auxiliares?Number(it.total_auxiliares).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>                          <td>${it.total?Number(it.total).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>                        </tr>`).join(');                        sItemsWrap.style.display='block';                      }else{                        sItemsWrap.style.display='none';                      }                      sRes.style.display='block';                      if(sInfo){                        sInfoPorte.textContent = data.porte_tabela_usada || '-';                        sInfoPorteAn.textContent = data.porte_an_tabela_usada || '-';                        sInfoUco.textContent = data.uco_valor ? Number(data.uco_valor).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}) : '-';                        sInfo.style.display='block';                      }                      if(sExport) sExport.style.display='inline-block';                    }catch(err){                      sItemsWrap.style.display='none';                      sRes.style.display='block';                    }                  });                  // Exportar PDF (via print)                  function exportSimPDF(){                    const w = window.open(', '_blank');                    if(!w) return;                    const title = document.getElementById('sim-title')?.innerText || 'Simulação CBHPM';                    const infoHtml = sInfo ? sInfo.outerHTML : ';                    const totalsHtml = ';                    const itemsHtml = (sItemsWrap && sItemsWrap.style.display!=='none') ? sItemsWrap.outerHTML : ';                    const styles = `                      <style>                        body{ font-family: Arial, sans-serif; padding:16px; }                        h1{ font-size:18px; margin:0 0 8px; }                        .summary-bar{ margin:8px 0; }                        .badge{ display:inline-block; background:#eef2ff; color:#334155; border-radius:12px; padding:4px 8px; margin-right:6px; font-size:12px; }                        table{ width:100%; border-collapse:collapse; }                        th, td{ border:1px solid #e5e7eb; padding:8px; font-size:12px; text-align:left; }                        thead th{ background:#f9fafb; font-weight:600; }                      </style>`;                    w.document.write(`<html><head><meta charset="utf-8"><title>${title}</title>${styles}</head><body>`);                    const logo = `<img src="{{ url_for('static', filename='logo-pdf.svg') }}" alt="" style="height:28px; vertical-align:middle; margin-right:8px;" onerror="this.style.display='none'">`;                    w.document.write(`<h1>${logo}${title}</h1>`);                    w.document.write(infoHtml);                    w.document.write(totalsHtml);                    if(itemsHtml) w.document.write(itemsHtml);                    w.document.write('</body></html>');                    w.document.close();                    w.focus();                    w.print();                  }                  // Override with a more polished PDF layout                  function exportSimPDF(){                    if(!lastSimData){ return; }                    const w = window.open(', '_blank');                    if(!w) return;                    const title = document.getElementById('sim-title')?.innerText || 'Simulação CBHPM';                    const meta = { versao: sVersao?.value || lastSimData.versao_base || '-', uf: sUF?.value || '-', porteTab: lastSimData.porte_tabela_usada || '-', porteAnTab: lastSimData.porte_an_tabela_usada || '-', uco: lastSimData.uco_valor ? Number(lastSimData.uco_valor).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}) : '-' };                    const isPacote = Array.isArray(lastSimData.itens);                    const items = isPacote ? lastSimData.itens : [{ codigo: lastSimData.codigo || (sQ?.value||''), descricao: lastSimData.descricao || ', total_porte: lastSimData.total_porte, total_filme: lastSimData.total_filme, total_uco: lastSimData.total_uco, total_porte_an: lastSimData.total_porte_an, total_auxiliares: lastSimData.total_auxiliares, total: lastSimData.total }];                    const styles = `                      <style>                        @page { margin: 18mm; }                        body{ font-family: Arial, sans-serif; color:#0f172a; }                        .header{ display:flex; align-items:center; justify-content: space-between; margin-bottom:14px; }                        .brand{ display:flex; align-items:center; gap:12px; }                        .brand img{ height: 72px; }                        .brand h1{ font-size:22px; margin:0; }                        .meta{ display:grid; grid-template-columns: repeat(5, 1fr); gap:8px; margin: 12px 0 16px; }                        .meta .card{ background:#f8fafc; border:1px solid #e5e7eb; padding:8px 10px; border-radius:8px; font-size:12px; }                        .meta .label{ color:#64748b; display:block; font-weight:600; margin-bottom:4px; text-transform:uppercase; letter-spacing:.03em; }                        table{ width:100%; border-collapse:separate; border-spacing:0; border-radius:10px; overflow:hidden; border:1px solid #e5e7eb; }                        thead th{ background:#f1f5f9; font-weight:700; font-size:12px; text-transform:uppercase; letter-spacing:.04em; }                        th, td{ padding:10px 12px; font-size:12px; border-bottom:1px solid #e5e7eb; }                        tbody tr:nth-child(even){ background:#fbfdff; }                        tbody tr:last-child td{ border-bottom:none; }                        tfoot td{ background:#f8fafc; font-weight:700; }                        .right{ text-align:right; }                        .muted{ color:#64748b; }                      </style>`;                    w.document.write(`<html><head><meta charset=\"utf-8\"><title>${title}</title>${styles}</head><body>`);                    const logo = `<img src=\"{{ url_for('static', filename='logo-pdf.svg') }}\" alt=\"\" onerror=\"this.style.display='none'\">`;                    w.document.write(`<div class=\"header\"><div class=\"brand\">${logo}<h1>${title}</h1></div><div class=\"muted\">${new Date().toLocaleString('pt-BR')}</div></div>`);                    w.document.write(`<div class=\"meta\">\n  <div class=\"card\"><span class=\"label\">Versão</span>${meta.versao}</div>\n  <div class=\"card\"><span class=\"label\">UF</span>${meta.uf}</div>\n  <div class=\"card\"><span class=\"label\">Tabela Porte</span>${meta.porteTab}</div>\n  <div class=\"card\"><span class=\"label\">Tabela Porte AN</span>${meta.porteAnTab}</div>\n  <div class=\"card\"><span class=\"label\">UCO</span>${meta.uco}</div>\n</div>`);                    let rows = items.map(it=>`<tr>\n  <td>${it.codigo}</td>\n  <td>${it.descricao||''}</td>\n  <td class=\"right\">${it.total_porte?Number(it.total_porte).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${it.total_filme?Number(it.total_filme).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${it.total_uco?Number(it.total_uco).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${it.total_porte_an?Number(it.total_porte_an).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${it.total_auxiliares?Number(it.total_auxiliares).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${it.total?Number(it.total).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n</tr>`).join(');                    const totals = { total_porte: lastSimData.total_porte, total_filme: lastSimData.total_filme, total_uco: lastSimData.total_uco, total_porte_an: lastSimData.total_porte_an, total_auxiliares: lastSimData.total_auxiliares, total: lastSimData.total };                    const totalsRow = (totals.total || totals.total_porte || totals.total_uco || totals.total_porte_an || totals.total_auxiliares)                      ? `<tfoot><tr><td colspan=\"2\">Totais do pacote</td>\n  <td class=\"right\">${totals.total_porte?Number(totals.total_porte).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${totals.total_filme?Number(totals.total_filme).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${totals.total_uco?Number(totals.total_uco).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${totals.total_porte_an?Number(totals.total_porte_an).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${totals.total_auxiliares?Number(totals.total_auxiliares).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td>\n  <td class=\"right\">${totals.total?Number(totals.total).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}):'-'}</td></tr></tfoot>` : ';                    w.document.write(`<table><thead><tr>\n  <th>Código</th><th>Descrição</th><th>Porte</th><th>Filme</th><th>UCO</th><th>Porte AN</th><th>Auxiliares</th><th>Total</th>\n</tr></thead><tbody>${rows}</tbody>${totalsRow}</table>`);                    w.document.write('</body></html>');                    w.document.close();                    w.focus();                    w.print();                  }                  sExport && sExport.addEventListener('click', exportSimPDF);                })();            </script>